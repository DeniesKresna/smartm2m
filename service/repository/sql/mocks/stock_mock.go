// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/DeniesKresna/smartm2m/models"
	mock "github.com/stretchr/testify/mock"

	serror "github.com/DeniesKresna/gobridge/serror"
)

// IMysqlStockRepository is an autogenerated mock type for the IMysqlStockRepository type
type IMysqlStockRepository struct {
	mock.Mock
}

// StockCreate provides a mock function with given fields: ctx, req
func (_m *IMysqlStockRepository) StockCreate(ctx context.Context, req models.StockCreateRequest) (int64, serror.SError) {
	ret := _m.Called(ctx, req)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, models.StockCreateRequest) int64); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 serror.SError
	if rf, ok := ret.Get(1).(func(context.Context, models.StockCreateRequest) serror.SError); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(serror.SError)
		}
	}

	return r0, r1
}

// StockGetByID provides a mock function with given fields: ctx, id
func (_m *IMysqlStockRepository) StockGetByID(ctx context.Context, id int64) (models.Stock, serror.SError) {
	ret := _m.Called(ctx, id)

	var r0 models.Stock
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.Stock); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Stock)
	}

	var r1 serror.SError
	if rf, ok := ret.Get(1).(func(context.Context, int64) serror.SError); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(serror.SError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewIMysqlStockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIMysqlStockRepository creates a new instance of IMysqlStockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIMysqlStockRepository(t mockConstructorTestingTNewIMysqlStockRepository) *IMysqlStockRepository {
	mock := &IMysqlStockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
